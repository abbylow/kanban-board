{"version":3,"sources":["contexts/DialogContext.js","contexts/ColumnContext.js","components/DialogRoot.js","components/EditableField.js","hooks/useEditableField.js","contexts/TaskContext.js","components/CardDetail.js","components/Card.js","components/NewCardForm.js","components/ColumnFooter.js","components/Column.js","components/ColumnContainer.js","services/handleMovement.js","components/Columns.js","components/NewListForm.js","App.js","index.js"],"names":["DialogContext","createContext","DialogProvider","children","useState","dialogIsOpen","setDialogIsOpen","otherProps","setOtherProps","Provider","value","handleOpen","customizedProps","handleClose","ColumnContext","ColumnsProvider","id","title","taskIds","columns","setColumns","columnOrder","setColumnOrder","DialogRoot","render","useContext","useStyles","makeStyles","container","margin","EditableField","displayIcon","className","placeholder","textClassName","handleUpdate","classes","text","setText","editMode","setEditMode","inputRef","useRef","useEffect","current","focus","useEditableField","updateText","toggleTextEditable","onClick","TextField","defaultValue","IconButton","color","Check","Close","TaskContext","TasksProvider","description","tasks","setTasks","header","display","justifyContent","flag","padding","formContainer","editorContainer","marginBottom","titleText","fontWeight","fontSize","CardDetail","selectedTaskId","selectedColumnId","updateCardField","updatedField","renderIcon","EditOutlined","Dialog","open","onClose","fullWidth","FlagOutlined","Typography","variant","newTaskIds","filter","task","newColumns","newTasks","DeleteOutline","DialogContent","newValue","card","borderRadius","backgroundColor","boxShadow","Card","index","columnId","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","NewCardForm","Add","cardTitle","nextId","shortId","buttonArea","renameArea","ColumnFooter","column","newListTitle","newColumnOrder","Array","from","el","width","flexDirection","maxHeight","taskList","transition","flexGrow","overflow","Column","myTasks","map","taskId","type","droppableId","droppableProps","key","ColumnContainer","React","memo","handleCardMovement","destination","source","selectedColumn","splice","reorderCards","startColumn","destinationColumn","startTaskIds","newStartColumn","destinationTaskIds","newDestinationColumn","moveCardAcrossList","lists","Columns","onDragEnd","result","handleListMovement","direction","innerNewList","NewListForm","listTitle","root","flex","listContainer","newList","minWidth","App","props","document","getElementById","style","cssText","ReactDOM"],"mappings":"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","file":"static/js/main.6bf700f2.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const DialogContext = createContext();\n\nexport const DialogProvider = ({ children }) => {\n  const [dialogIsOpen, setDialogIsOpen] = useState(false);\n  const [otherProps, setOtherProps] = useState({});\n\n  const handleOpen = (customizedProps) => {\n    setDialogIsOpen(true);\n    setOtherProps(customizedProps);\n  };\n\n  const handleClose = () => {\n    setDialogIsOpen(false);\n    setOtherProps({});\n  };\n\n  return (\n    <DialogContext.Provider value={{ dialogIsOpen, handleOpen, handleClose, ...otherProps }}>\n      {children}\n    </DialogContext.Provider>\n  );\n}\n\n","import React, { useState, createContext } from 'react';\n\nexport const ColumnContext = createContext();\n\nexport const ColumnsProvider = ({ children }) => {\n  const [columns, setColumns] = useState({\n    'column-1': {\n      id: 'column-1',\n      title: 'To do',\n      taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In progress',\n      taskIds: []\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: []\n    }\n  });\n\n  const [columnOrder, setColumnOrder] = useState(['column-1', 'column-2', 'column-3']);\n\n  return (\n    <ColumnContext.Provider value={{ columns, setColumns, columnOrder, setColumnOrder }}>\n      {children}\n    </ColumnContext.Provider>\n  );\n}\n\n","import { useContext } from 'react';\nimport { DialogContext } from '../contexts/DialogContext';\n\nexport const DialogRoot = ({ render }) => {\n  const { dialogIsOpen, handleClose, ...otherProps } = useContext(DialogContext);\n  return render({ dialogIsOpen, handleClose, ...otherProps });\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useEditableField } from '../hooks/useEditableField';\nimport { TextField, IconButton } from '@material-ui/core';\nimport { Check, Close } from '@material-ui/icons';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles({\n  container: {\n    margin: '0.25em 0.5em',\n  }\n});\n\nexport const EditableField = ({ displayIcon, className, placeholder = 'Enter some text...', textClassName, handleUpdate }) => {\n  const classes = useStyles();\n\n  const [text, editMode, inputRef, updateText, toggleTextEditable] = useEditableField(handleUpdate);\n\n  return (\n    <div className={className}>\n      {\n        displayIcon && !editMode && (\n          <div onClick={toggleTextEditable}>\n            {displayIcon()}\n          </div>\n        )\n      }\n\n      <div className={classes.container}>\n        {\n          editMode ? (\n            <div>\n              <TextField placeholder={placeholder} defaultValue={text} inputRef={inputRef}/>\n              <IconButton color=\"primary\" onClick={updateText}><Check /></IconButton>\n              <IconButton color=\"secondary\" onClick={toggleTextEditable}><Close /></IconButton>\n            </div >\n          ) :\n            <div className={textClassName} onClick={toggleTextEditable}>\n              {text ? text : placeholder}\n            </div>\n        }\n      </div>\n    </div>\n\n\n  )\n}\n\n\nEditableField.propTypes = {\n  displayIcon: PropTypes.func,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  textClassName: PropTypes.string,\n  handleUpdate: PropTypes.func,\n}\n","import { useState, useRef, useEffect } from 'react';\n\nexport const useEditableField = (handleUpdate) => {\n  const [text, setText] = useState('');\n\n  const [editMode, setEditMode] = useState(false);\n\n  const inputRef = useRef(null);\n\n  const toggleTextEditable = () => {\n    setEditMode(!editMode);\n  }\n\n  const updateText = () => {\n    setText(inputRef.current.value);\n    setEditMode(false);\n\n    // call the update handling function and reset the text\n    if (handleUpdate) {\n      handleUpdate(inputRef.current.value);\n      setText('');\n    }\n  }\n\n  useEffect(() => {\n    if (editMode) {\n      inputRef.current.focus()\n    }\n  }, [editMode, inputRef]);\n\n  return [text, editMode, inputRef, updateText, toggleTextEditable];\n}","import React, { useState, createContext } from 'react';\n\nexport const TaskContext = createContext();\n\nexport const TasksProvider = ({ children }) => {\n  const [tasks, setTasks] = useState({\n    'task-1': { id: 'task-1', title: \"Take out the garbages\", description: \"\" },\n    'task-2': { id: 'task-2', title: \"Watch my favorite show\", description: \"\" },\n    'task-3': { id: 'task-3', title: \"Charge my phone\", description: \"\" },\n    'task-4': { id: 'task-4', title: \"Cook dinner\", description: \"\" },\n  });\n\n  return (\n    <TaskContext.Provider value={{ tasks, setTasks }}>\n      {children}\n    </TaskContext.Provider>\n  );\n}\n\n","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Dialog, DialogContent, IconButton, Typography } from '@material-ui/core';\nimport { DeleteOutline, Close, EditOutlined, FlagOutlined } from '@material-ui/icons';\nimport { EditableField } from './EditableField';\nimport { TaskContext } from '../contexts/TaskContext';\nimport { ColumnContext } from '../contexts/ColumnContext';\n\nconst useStyles = makeStyles({\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '0.25em'\n  },\n  flag: {\n    padding: '1em',\n    display: 'flex'\n  },\n  formContainer: {\n    display: 'flex',\n  },\n  editorContainer: {\n    marginBottom: '1em'\n  },\n  titleText: {\n    fontWeight: 'bolder',\n    fontSize: 'x-large'\n  }\n});\n\nexport default function CardDetail({ dialogIsOpen, handleClose, ...otherProps }) {\n  const { selectedTaskId, selectedColumnId } = otherProps;\n  const classes = useStyles();\n\n  const { tasks, setTasks } = useContext(TaskContext);\n\n  const updateCardField = (updatedField) => {\n    setTasks({ ...tasks, [selectedTaskId]: { ...tasks[selectedTaskId], ...updatedField } })\n  }\n\n  const { columns, setColumns } = useContext(ColumnContext);\n  \n  const deleteCard = () => {\n    let newTaskIds = [...columns[selectedColumnId].taskIds];\n    newTaskIds = newTaskIds.filter(task => task !== selectedTaskId);\n    let newColumns = { ...columns, [selectedColumnId]: { ...columns[selectedColumnId], taskIds: newTaskIds } }\n    setColumns(newColumns);\n\n    let newTasks = { ...tasks };\n    delete newTasks[selectedTaskId];\n    setTasks(newTasks);\n\n    handleClose();\n  }\n\n  const renderIcon = () => <EditOutlined />\n\n  return (\n    <Dialog open={dialogIsOpen} onClose={handleClose} fullWidth>\n      <div className={classes.header}>\n        <div className={classes.flag}>\n          <FlagOutlined />\n          <Typography variant=\"overline\">{selectedTaskId}</Typography>\n        </div>\n        <div>\n          <IconButton onClick={deleteCard}>\n            <DeleteOutline />\n          </IconButton>\n          <IconButton onClick={handleClose}>\n            <Close />\n          </IconButton>\n        </div>\n      </div>\n\n      <DialogContent>\n        <div className={classes.editorContainer}>\n          <EditableField\n            displayIcon={renderIcon}\n            className={classes.formContainer}\n            textClassName={classes.titleText}\n            placeholder={tasks && tasks[selectedTaskId] && tasks[selectedTaskId].title ? tasks && tasks[selectedTaskId] && tasks[selectedTaskId].title : 'Add a title'}\n            handleUpdate={(newValue) => { updateCardField({ title: newValue }) }}\n          />\n        </div>\n\n        <div className={classes.editorContainer}>\n          <EditableField\n            displayIcon={renderIcon}\n            className={classes.formContainer}\n            placeholder={tasks && tasks[selectedTaskId] && tasks[selectedTaskId].description ? tasks && tasks[selectedTaskId] && tasks[selectedTaskId].description : 'Add a description'}\n            handleUpdate={(newValue) => { updateCardField({ description: newValue }) }}\n          />\n        </div>\n      </DialogContent>\n\n    </Dialog>\n  );\n}","import React, { useContext } from 'react';\nimport { DialogContext } from '../contexts/DialogContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst useStyles = makeStyles({\n  card: {\n    marginBottom: '0.5em',\n    padding: '1em',\n    borderRadius: '0.25em',\n    backgroundColor: 'white',\n    boxShadow: 'rgba(9, 30, 66, 0.25) 0px 1px 2px 0px',\n  }\n});\n\nexport const Card = ({ task, index, columnId }) => {\n  const classes = useStyles();\n  const { handleOpen } = useContext(DialogContext);\n\n  return (\n    <Draggable\n      draggableId={task.id}\n      index={index}\n    >\n      {(provided) => (\n        <div\n          className={classes.card}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          onClick={() => handleOpen({ selectedTaskId: task.id, selectedColumnId: columnId })} //can pass the other variables for different dialog purposes\n        >\n          {task.title}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n\n","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as shortId from \"shortid\";\nimport { ColumnContext } from '../contexts/ColumnContext';\nimport { Add } from '@material-ui/icons';\nimport { EditableField } from './EditableField';\n\nconst useStyles = makeStyles({\n  formContainer: {\n    padding: '0.5em 0.75em',\n    display: 'flex',\n  },\n});\n\nexport const NewCardForm = ({ columnId, setTasks, tasks }) => {\n  const classes = useStyles();\n  const { columns, setColumns } = useContext(ColumnContext);\n\n  const addCard = (cardTitle) => {\n    if (cardTitle) {\n      const nextId = 'task-' + shortId.generate();\n      setTasks({\n        ...tasks,\n        [nextId]: {\n          id: nextId,\n          title: cardTitle,\n          description: ''\n        }\n      });\n      setColumns({\n        ...columns,\n        [columnId]: {\n          ...columns[columnId],\n          taskIds: [...columns[columnId].taskIds, nextId]\n        }\n      });\n    }\n  }\n\n  const renderIcon = () => <Add />\n\n  return (\n    <EditableField displayIcon={renderIcon} className={classes.formContainer} placeholder={'Add A New Card'} handleUpdate={addCard} />\n  )\n}","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DeleteOutline, EditOutlined } from '@material-ui/icons';\nimport { EditableField } from './EditableField';\nimport { ColumnContext } from '../contexts/ColumnContext';\n\nconst useStyles = makeStyles({\n  buttonArea: {\n    padding: '0.5em 0.75em',\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  renameArea: {\n    display: 'flex'\n  },\n});\n\nexport const ColumnFooter = ({ column }) => {\n  const classes = useStyles();\n\n  const { columns, setColumns, columnOrder, setColumnOrder } = useContext(ColumnContext);\n\n  const deleteList = () => {\n    let newColumns = { ...columns };\n    delete newColumns[column.id];\n    setColumns(newColumns);\n\n    let newColumnOrder = Array.from(columnOrder);\n    setColumnOrder(newColumnOrder.filter(el => el !== column.id));\n  }\n\n  const renameList = (newListTitle) => {\n    let newColumns = { ...columns };\n    setColumns({ ...newColumns, [column.id]: { ...columns[column.id], title: newListTitle } });\n  }\n\n  const renderIcon = () => <EditOutlined />\n\n  return (\n    <div className={classes.buttonArea}>\n      <EditableField\n        displayIcon={renderIcon}\n        className={classes.renameArea} placeholder={'Rename List'}\n        handleUpdate={renameList}\n      />\n      <DeleteOutline onClick={deleteList} />\n    </div>\n  )\n}","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { Card } from './Card';\nimport { NewCardForm } from './NewCardForm';\nimport { TaskContext } from '../contexts/TaskContext';\nimport { ColumnFooter } from './ColumnFooter';\n\nconst useStyles = makeStyles({\n  container: {\n    margin: '0.5em',\n    backgroundColor: '#ebecf0',\n    borderRadius: '0.25em',\n    width: '15em',\n    display: 'flex',\n    flexDirection: 'column',\n    maxHeight: '100vh'\n  },\n  title: {\n    padding: '0.5em 0.75em',\n    fontWeight: 'bolder',\n    fontSize: 'large'\n  },\n  taskList: {\n    padding: '0.5em',\n    transition: 'background-color 0.2s ease',\n    flexGrow: 1,\n    overflow: 'scroll'\n  },\n});\n\nexport default function Column({ index, column }) {\n  const classes = useStyles();\n  const { tasks, setTasks } = useContext(TaskContext);\n  const myTasks = column.taskIds.map(taskId => tasks[taskId]);\n\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {(provided) => (\n        <div\n          className={classes.container}\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n        >\n          <div {...provided.dragHandleProps} className={classes.title}>\n            {column.title}\n          </div>\n          <NewCardForm columnId={column.id} setTasks={setTasks} tasks={tasks} />\n          <Droppable type=\"card\" droppableId={column.id}>\n            {(provided) => (\n              <div\n                className={classes.taskList}\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {myTasks.map((task, index) =>\n                  <Card key={task.id} task={task} index={index} columnId={column.id}/>\n                )}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <ColumnFooter column={column} />\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n\n","import React from 'react';\nimport Column from './Column';\n\nexport const ColumnContainer = React.memo(({ columns, index, columnId }) => {\n  const column = columns[columnId];\n  return <Column column={column} index={index} />;\n});\n","\nexport function handleListMovement(columnOrder, destination, source, draggableId) {\n  const newColumnOrder = Array.from(columnOrder);\n  newColumnOrder.splice(source.index, 1);\n  newColumnOrder.splice(destination.index, 0, draggableId);\n  return newColumnOrder;\n}\n\nfunction reorderCards(columns, destination, source, draggableId) {\n  const selectedColumn = columns[source.droppableId];\n\n  const newTaskIds = Array.from(selectedColumn.taskIds);\n  newTaskIds.splice(source.index, 1);\n  newTaskIds.splice(destination.index, 0, draggableId);\n\n  return {\n    ...columns,\n    [selectedColumn.id]: { ...selectedColumn, taskIds: newTaskIds }\n  };\n}\n\nfunction moveCardAcrossList(columns, destination, source, draggableId) {\n  const startColumn = columns[source.droppableId];\n  const destinationColumn = columns[destination.droppableId];\n\n  const startTaskIds = Array.from(startColumn.taskIds);\n  startTaskIds.splice(source.index, 1);\n  const newStartColumn = { ...startColumn, taskIds: startTaskIds };\n\n  const destinationTaskIds = Array.from(destinationColumn.taskIds);\n  destinationTaskIds.splice(destination.index, 0, draggableId);\n  const newDestinationColumn = { ...destinationColumn, taskIds: destinationTaskIds };\n\n  return {\n    ...columns,\n    [newStartColumn.id]: newStartColumn,\n    [newDestinationColumn.id]: newDestinationColumn\n  }\n}\n\nexport function handleCardMovement(columns, destination, source, draggableId) {\n  if (source.droppableId === destination.droppableId) {\n    return reorderCards(columns, destination, source, draggableId);\n  }\n  return moveCardAcrossList(columns, destination, source, draggableId);\n}","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { ColumnContainer } from './ColumnContainer';\nimport { handleCardMovement, handleListMovement } from '../services/handleMovement';\nimport { ColumnContext } from '../contexts/ColumnContext';\n\nconst useStyles = makeStyles({\n  lists: {\n    display: 'flex',\n  },\n  title: {\n    fontWeight: 'bolder',\n    fontSize: 'x-large'\n  }\n});\n\nexport const Columns = () => {\n  const classes = useStyles();\n  const { columns, setColumns, columnOrder, setColumnOrder } = useContext(ColumnContext);\n\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if (type === 'list') {\n      let newColumnOrder = handleListMovement(columnOrder, destination, source, draggableId);\n      setColumnOrder(newColumnOrder);\n    }\n    else {\n      let newColumns = handleCardMovement(columns, destination, source, draggableId);\n      setColumns(newColumns);\n    }\n    return;\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"list\" >\n        {(provided) => (\n          <div className={classes.lists} {...provided.droppableProps} ref={provided.innerRef}>\n            {columnOrder.map((columnId, index) => {\n              return (\n                <ColumnContainer\n                  key={columnId}\n                  index={index}\n                  columnId={columnId}\n                  columns={columns}\n                />\n              );\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as shortId from \"shortid\";\nimport { ColumnContext } from '../contexts/ColumnContext';\nimport { Add } from '@material-ui/icons';\nimport { EditableField } from './EditableField';\n\nconst useStyles = makeStyles({\n  innerNewList: {\n    padding: '0.5em',\n    borderRadius: '0.25em',\n    backgroundColor: 'rgb(235, 236, 240, .5)',\n    display: 'flex'\n  }\n});\n\nexport const NewListForm = () => {\n  const classes = useStyles();\n  const { columns, setColumns, columnOrder, setColumnOrder } = useContext(ColumnContext);\n\n  const addList = (listTitle) => {\n    if (listTitle) {\n      const nextId = 'column-' + shortId.generate();\n      setColumns({\n        ...columns,\n        [nextId]: {\n          id: nextId,\n          title: listTitle,\n          taskIds: []\n        }\n      });\n      setColumnOrder([...columnOrder, nextId]);\n    }\n  }\n\n  const renderIcon = () => <Add />\n\n  return (\n    <EditableField displayIcon={renderIcon} className={classes.innerNewList} placeholder={'Add A New List'} handleUpdate={addList} />\n  )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DialogProvider } from './contexts/DialogContext';\nimport { ColumnsProvider } from './contexts/ColumnContext';\nimport { DialogRoot } from './components/DialogRoot';\nimport CardDetail from './components/CardDetail';\nimport { EditableField } from './components/EditableField';\nimport { Columns } from './components/Columns';\nimport { NewListForm } from './components/NewListForm';\nimport { TasksProvider } from './contexts/TaskContext';\n\nconst useStyles = makeStyles({\n  root: {\n    flex: 1,\n    padding: '1em',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  title: {\n    fontWeight: 'bolder',\n    fontSize: 'x-large'\n  },\n  listContainer: {\n    flex: 1,\n    display: 'flex'\n  },\n  newList: {\n    margin: '0.5em',\n    minWidth: '15em'\n  }\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <EditableField placeholder={'Default Board Name'} textClassName={classes.title} />\n\n      <DialogProvider>\n        <TasksProvider>\n          <ColumnsProvider>\n            <div className={classes.listContainer}>\n              <Columns />\n              <div className={classes.newList}><NewListForm /></div>\n            </div>\n            <DialogRoot render={(props) => <CardDetail {...props} />} />\n          </ColumnsProvider>\n        </TasksProvider>\n      </DialogProvider>\n\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = document.getElementById('root');\nroot.style.cssText = 'width: 100vw; height: 100vh; display: flex; flex-direction: column';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}